apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: validate-k8s-deployment-file
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc
      - name: deployment-file
        default: deployment.yml
      - name: imagePropertiesFile
        description: file containing properties of the image to be scanned
        default: 'build.properties'
    resources:
      - name: image
        type: image
  steps:
    - name: check-deployment-file
      # tbd: use an image with curl and jq?
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      env:
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          if [ ! -f "$(params.deployment-file)" ]; then
            echo "WARN: No deployment file exists. Generating one"
            # TODO
            exit 1
          fi
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume      
    - name: update-deployment-file
      # tbd: use an image with curl and jq?
      image: ibmcom/pipeline-base-image
      env:
      workingDir: /artifacts
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          INPUT_IMAGE_URL=$(echo $(inputs.resources.image.url) |  awk -F: '{print $1}')
          INPUT_IMAGE_TAG=$(echo $(inputs.resources.image.url) |  awk -F: '{print $2}')
          INPUT_IMAGE_DIGEST=$(inputs.resources.image.digest)

          # Because of https://github.com/tektoncd/pipeline/issues/216 the image digest for input is probably empty
          # If image digest is empty, then use the imageProperties file to obtain the information
          if [ -z "$INPUT_IMAGE_DIGEST" ]; then
            if [ -z "$(params.imagePropertiesFile)" ]; then
              echo "No digest found - use only the image url"
              PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL"
            else
              # Look for the digest in the imagePropertiesFile
              source $(params.imagePropertiesFile)
              PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL@$IMAGE_MANIFEST_SHA"
            fi
          else
            PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL@$INPUT_IMAGE_DIGEST"
          fi

          echo -e "Updating $(params.deployment-file) manifest with image name: ${PIPELINE_IMAGE_URL}"
          # find the yaml document index for the K8S deployment definition
          DEPLOYMENT_DOC_INDEX=$(yq read --doc "*" --tojson $(params.deployment-file) | jq -r 'to_entries | .[] | select(.value.kind | ascii_downcase=="deployment") | .key')
          if [ -z "$DEPLOYMENT_DOC_INDEX" ]; then
            echo "No Kubernetes Deployment definition found in $(params.deployment-file). Updating YAML document with index 0"
            DEPLOYMENT_DOC_INDEX=0
          fi
          # Update deployment with image name
          yq write $(params.deployment-file) --doc $DEPLOYMENT_DOC_INDEX "spec.template.spec.containers[0].image" "${PIPELINE_IMAGE_URL}" > /steps/$(params.deployment-file)
          cp --force /steps/$(params.deployment-file) /artifacts/$(params.deployment-file)
          # 
          cat $(params.deployment-file)
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume      
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(params.task-pvc)
