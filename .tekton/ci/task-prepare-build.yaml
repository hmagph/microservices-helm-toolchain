apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: prepare-build-task
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: git-repository
      description: The git repository
    - name: git-branch
      description: The active branch for the repository
    - name: git-commit
      description: The current commit id that was cloned
    - name: registry-region-id
      description: The target region for container registry
    - name: registry-namespace
      description: The target namespace in container registry
    - name: image-name
      description: Custom image name (inferred from repo name by default)
      default: ""
    - name: build-number
      description: Current pipeline build number
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
  results:
    - name: registry-url
      description: The url of the containr registry 
    - name: image-url
      description: The url of the image to build 
    - name: image-tag
      description: The tag of the image to build
  workspaces:
    - name: artifacts
      description: A workspace backing by a volume where the files (Dockerfile etc..) are expected to be
      mountPath: /artifacts
  steps:
    - name: check-registry-and-build-image
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      env:
        - name: GIT_REPOSITORY
          value: $(params.git-repository)
        - name: GIT_COMMIT
          value: $(params.git-commit)
        - name: GIT_BRANCH
          value: $(params.git-branch)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)            
        - name: BUILD_NUMBER
          value: $(params.build-number)
        - name: IMAGE_NAME
          value: $(params.image-name)
        - name: REGISTRY_REGION_ID
          value: $(params.registry-region-id)
        - name: REGISTRY_NAMESPACE
          value: $(params.registry-namespace)
      script: |
          #!/bin/bash
          set -e -o pipefail
          set -x
          if [ $PIPELINE_DEBUG == 1 ]; then
              pwd
              env
              trap env EXIT
              set -x
          fi
          # Determine image url using: target container registry location and repository name
          # e.g. ibm:yp:us-south --> us.icr.io
          if [[ "$REGISTRY_REGION_ID" == *:ys1:* ]]; then
            REGISTRY_URL="https://stg.icr.io"
          elif [[ "$REGISTRY_REGION_ID" == "ibm:yp:us-south" ]]; then
            REGISTRY_URL="https://us.icr.io"
          elif [[ "$REGISTRY_REGION_ID" == "ibm:yp:us-east" ]]; then
            REGISTRY_URL="https://us.icr.io"
          elif [[ "$REGISTRY_REGION_ID" == "ibm:yp:eu-de" ]]; then
            REGISTRY_URL="https://de.icr.io"
          elif [[ "$REGISTRY_REGION_ID" == "ibm:yp:eu-gb" ]]; then
            REGISTRY_URL="https://uk.icr.io"
          elif [[ "$REGISTRY_REGION_ID" == "ibm:yp:jp-tok" ]]; then
            REGISTRY_URL="https://jp.icr.io"
          elif [[ "$REGISTRY_REGION_ID" == "ibm:yp:au-syd" ]]; then
            REGISTRY_URL="https://au.icr.io"
          else
            echo "Unknown registry region: ${REGISTRY_REGION_ID}"
            exit 1
          fi
          echo "REGISTRY_URL=${REGISTRY_URL}"
          IMAGE_REPOSITORY_URL="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}"
          echo "IMAGE_REPOSITORY_URL=${IMAGE_REPOSITORY_URL}"

          # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
          # e.g. 3-master-50da6912-20181123114435
          # (use build number as first segment to allow image tag as a patch release name according to semantic versioning)
          TIMESTAMP=$( date -u "+%Y%m%d%H%M%S")
          IMAGE_TAG=${TIMESTAMP}
          if [ ! -z "${GIT_COMMIT}" ]; then
            GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 ) 
            IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
          fi
          if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
          IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}
          echo "IMAGE_TAG=${IMAGE_TAG}"
          # Record task results
          echo -n "${REGISTRY_URL}" > $(results.registry-url.path)
          echo -n "${IMAGE_REPOSITORY_URL}" > $(results.image-url.path)
          echo -n "${IMAGE_TAG}" > $(results.image-tag.path)

